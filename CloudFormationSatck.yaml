AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with public and private subnets, EC2 instances, and a Load Balancer'
Parameters:
  Region:
    Type: String
    Default: "eu-west-3"
    Description: "The AWS region to deploy the stack"

  Prefix:
    Type: String
    Default: "nti"
    Description: "A prefix for resource names"

Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2SSMCloudWatchPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:DescribeAssociation"
                  - "ssm:GetDeployablePatchSnapshotForInstance"
                  - "ssm:GetDocument"
                  - "ssm:DescribeDocument"
                  - "ssm:GetManifest"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:ListAssociations"
                  - "ssm:ListInstanceAssociations"
                  - "ssm:PutInventory"
                  - "ssm:PutComplianceItems"
                  - "ssm:PutConfigurePackageResult"
                  - "ssm:UpdateAssociationStatus"
                  - "ssm:UpdateInstanceAssociationStatus"
                  - "ssm:UpdateInstanceInformation"
                  - "ssmmessages:CreateControlChannel"
                  - "ssmmessages:CreateDataChannel"
                  - "ssmmessages:OpenControlChannel"
                  - "ssmmessages:OpenDataChannel"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "*"

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Sub "${Region}a"

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Sub "${Region}b"
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  Subnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Instance1:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: ami-00c71bd4d220aa22a  
  #     InstanceType: t2.micro
  #     SubnetId: !Ref Subnet1
  #     SecurityGroupIds:
  #       - !Ref SecurityGroup
  #     UserData: !Base64 |
  #       #!/bin/bash
  #       sudo apt install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
  #       sudo apt install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
  #       sudo systemctl start amazon-ssm-agent
  #       sudo systemctl enable amazon-ssm-agent
  #       sudo systemctl start amazon-cloudwatch-agent
  #       sudo systemctl enable amazon-cloudwatch-agent
  #     IamInstanceProfile: !Ref EC2Role


  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
      Type: application

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '3'
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: MyAutoScalingGroup
          PropagateAtLaunch: 'true'
          
  MyInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
          - !Ref EC2Role

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-00c71bd4d220aa22a  
      InstanceType: t2.micro
      KeyName: ntikey
      IamInstanceProfile: !Ref MyInstanceProfile
      SecurityGroups:
        - !Ref SecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        sudo apt install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        sudo apt install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
        sudo systemctl start amazon-ssm-agent
        sudo systemctl enable amazon-ssm-agent
        sudo systemctl start amazon-cloudwatch-agent
        sudo systemctl enable amazon-cloudwatch-agent
